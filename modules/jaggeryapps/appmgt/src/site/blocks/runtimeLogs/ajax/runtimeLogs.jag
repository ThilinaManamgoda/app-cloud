<%
/*
 * Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 *
 *   WSO2 Inc. licenses this file to you under the Apache License,
 *   Version 2.0 (the "License"); you may not use this file except
 *   in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing,
 *   software distributed under the License is distributed on an
 *   "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 *   KIND, either express or implied.  See the License for the
 *   specific language governing permissions and limitations
 *   under the License.
 */

include("/jagg/jagg.jag");
include("/jagg/constants.jag");

(function () {
    var mod, obj,
        action = request.getParameter("action"),
        site = require("/site/conf/site.json");

    var log = new Log();

    if (action == "getSnapshotLogs") {

        var applicationKey = request.getParameter("applicationKey");
        var selectedRevision = request.getParameter("selectedRevision");
        var Util = Packages.org.wso2.appcloud.core.Util;
        var ApplicationManager = Packages.org.wso2.appcloud.core.ApplicationManager;
        var applicationName = ApplicationManager.getApplicationNameByHashId(applicationKey);
        var versionHashId = Util.getVersionHashId(applicationName, selectedRevision, modManager.getTenantId());
        var isFirstRequest = request.getParameter("isFirstRequest");
        var mod = jagg.module("runtimeLogs");
        var modApplication = jagg.module("application");
        try {
            var applicationType = modApplication.getApplication(applicationKey).applicationType;
            var logMap = mod.getFormattedRuntimeLogs(applicationKey, selectedRevision, applicationType, isFirstRequest);
            print(logMap);
        } catch(e) {
            var msg = "Error while getting deployment logs";
            log.error(e);
            log.error(msg+" for application: "+applicationKey+ " and revision: "+ selectedRevision);
            response.status = 400;
            response.content = msg;
        }
    } else if (action == "downloadLogs") {

        var applicationKey = request.getParameter("applicationKey");
        var selectedRevision = request.getParameter("selectedRevision");
        var selectedReplica = request.getParameter("selectedReplica");

	//splitting from the second_ to get the selectedReplica ID
        var undScore1 = selectedReplica.split("_")[0];
        var undScore2 = selectedReplica.split("_")[1];
        var bothUndScores = undScore1 + "_" + undScore2 + "_";
        var selectedReplicaId = selectedReplica.split(bothUndScores)[1];

        var mod = jagg.module("runtimeLogs");
        var modApplication = jagg.module("application");
        try {
            var applicationType = modApplication.getApplication(applicationKey).applicationType;            
	    var logMap = mod.getDownloadableRuntimeLogs(selectedReplicaId);
            print(logMap);
        } catch(e) {
            var msg = "Error while getting deployment logs";
            log.error(e);
            log.error(msg+" for application: "+applicationKey+ " and revision: "+ selectedRevision);
            response.status = 400;
            response.content = msg;
        }
    } else if (action == "getApplicationRevisionStatus") {
        var applicationKey = request.getParameter("applicationKey");
        var selectedRevision = request.getParameter("selectedRevision");
        var mod = jagg.module("application");

        try {
            var status = mod.getApplicationRevisionStatus(applicationKey, selectedRevision);
            print(status);
        } catch (e) {
            var msg = "Error while getting application revision status";
            response.status = 400;
            response.content = msg;
        }

    } else {
        log.error("No action specified");
    }
}());
%>
